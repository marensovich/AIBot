package org.marensovich.bot.bot;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.marensovich.bot.bot.AI.GPT.DeepSeekService;
import org.marensovich.bot.bot.AI.GPT.YandexGptService;
import org.marensovich.bot.bot.AI.Vision.YandexVisionService;
import org.marensovich.bot.bot.AI.Voice.YandexVoiceService;
import org.marensovich.bot.bot.Callback.CallbackManager;
import org.marensovich.bot.bot.Command.CommandManager;
import org.marensovich.bot.bot.Yandex.Storage.YandexStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Comparator;
import java.util.List;

@Slf4j
public class Bot extends TelegramLongPollingBot {

    @Autowired @Getter private CommandManager commandManager;
    @Autowired @Getter private CallbackManager callbackManager;
    @Getter private static Bot instance;

    private final String botToken;
    private final String botUsername;

    @Autowired private DeepSeekService deepSeekService;
    @Autowired private YandexGptService yandexGptService;
    @Autowired private YandexVisionService visionService;
    @Autowired private YandexVoiceService voiceService;
    @Autowired private YandexStorageService storageService;

    public Bot(String botToken, String botUsername) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        instance = this;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasVoice()) {
            saveAudioFile(update.getMessage());
            //handleVoiceMessage(update.getMessage());
        }
        if (update.hasMessage() && update.getMessage().hasPhoto()) {
            handlePhotoMessage(update);
            return;
        }
        if (update.hasMessage() && update.getMessage().hasText()) {
            if (update.getMessage().getText().startsWith("/")) {
                commandManager.executeCommand(update);
            } else if (update.getMessage().getText().startsWith("/deepseek")) {
                handleDeepSeekCommand(update);
            } else if (update.getMessage().getText().startsWith("/yandex")) {
                handleYandexCommand(update);
            }
        }
        if (update.hasCallbackQuery()) {
            callbackManager.handleCallback(update);
        }
    }

    private void saveAudioFile(Message message){
        Long chatId = message.getChatId();
        Voice voice = message.getVoice();

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            GetFile getFile = new GetFile(voice.getFileId());
            File file = execute(getFile);
            String fileUrl = "https://api.telegram.org/file/bot" + getBotToken() + "/" + file.getFilePath();

            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É resources/voice_messages –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            Path voiceMessagesDir = Paths.get("Bot/src/main/resources/voice_messages");
            if (!Files.exists(voiceMessagesDir)) {
                Files.createDirectories(voiceMessagesDir);
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            String fileName = "voice_" + System.currentTimeMillis() + ".ogg";
            Path filePath = voiceMessagesDir.resolve(fileName);

            // –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            try (InputStream in = new URL(fileUrl).openStream()) {
                Files.copy(in, filePath, StandardCopyOption.REPLACE_EXISTING);
                log.info("Voice message saved to: {}", filePath);
                sendTextMessage(chatId, "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");
            }

            try (InputStream stream = new FileInputStream("Bot/src/main/resources/voice_messages/" + fileName)) {
                storageService.uploadVoiceMessage(
                        "botvoicedata",
                        "voicedata/" + fileName,
                        stream);
            }

        } catch (Exception e) {
            log.error("Error saving voice message", e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }
    }

    private void handleVoiceMessage(Message message) {
        Long chatId = message.getChatId();
        Voice voice = message.getVoice();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ (–Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥)
        if (voice.getDuration() > 30) {
            sendTextMessage(chatId, "‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)");
            return;
        }

        sendTextMessage(chatId, "üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");

        getVoiceFile(voice.getFileId())
                .flatMap(audioData -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 1 –ú–ë)
                    if (audioData.length > 1_000_000) {
                        return Mono.just("‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 1 –ú–ë)");
                    }
                    return voiceService.recognizeSpeech(audioData);
                })
                .subscribe(
                        text -> sendTextMessage(chatId, "üîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n" + text),
                        error -> sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: " + error.getMessage())
                );
    }

    private Mono<byte[]> getVoiceFile(String fileId) {
        return Mono.fromCallable(() -> {
            GetFile getFile = new GetFile(fileId);
            String filePath = execute(getFile).getFilePath();
            String fileUrl = "https://api.telegram.org/file/bot" + getBotToken() + "/" + filePath;

            try (InputStream in = new URL(fileUrl).openStream()) {
                return in.readAllBytes();
            }
        }).subscribeOn(Schedulers.boundedElastic());
    }

    private void handleDeepSeekCommand(Update update) {
        String userText = update.getMessage().getText().replace("/deepseek", "").trim();
        try {
            String aiResponse = deepSeekService.getAiResponse(userText).block();
            sendTextMessage(update.getMessage().getChatId(), "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò: " + aiResponse);
        } catch (Exception e) {
            sendTextMessage(update.getMessage().getChatId(), "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void handleYandexCommand(Update update) {
        String userText = update.getMessage().getText().replace("/yandex", "").trim();
        try {
            String aiResponse = yandexGptService.getAiResponse(userText).block();
            SendMessage message = new SendMessage();
            message.setChatId(update.getMessage().getChatId().toString());
            message.setText(aiResponse);
            message.enableMarkdown(true);
            execute(message);
        } catch (Exception e) {
            sendTextMessage(update.getMessage().getChatId(), "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void handlePhotoMessage(Update update) {
        List<PhotoSize> photos = update.getMessage().getPhoto();
        PhotoSize photo = photos.stream()
                .max(Comparator.comparing(PhotoSize::getFileSize))
                .orElse(null);

        if (photo != null) {
            processPhoto(update.getMessage().getChatId(), photo);
        } else {
            sendTextMessage(update.getMessage().getChatId(), "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
        }
    }

    private void processPhoto(Long chatId, PhotoSize photo) {
        try {
            String fileId = photo.getFileId();
            String filePath = execute(new GetFile(fileId)).getFilePath();
            String fileUrl = "https://api.telegram.org/file/bot" + getBotToken() + "/" + filePath;
            String mimeType = filePath.toLowerCase().endsWith(".png") ? "PNG" : "JPEG";

            byte[] imageData;
            try (InputStream in = new URL(fileUrl).openStream()) {
                imageData = in.readAllBytes();
                if (imageData.length > 10 * 1024 * 1024) {
                    sendTextMessage(chatId, "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å. 10MB)");
                    return;
                }
            }

            sendTextMessage(chatId, "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");

            visionService.recognizeTextFromImage(imageData, mimeType)
                    .subscribe(
                            text -> sendTextMessage(chatId, text.isBlank() ?
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç" : "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n" + text),
                            error -> sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + getErrorMessage(error))
                    );
        } catch (Exception e) {
            sendTextMessage(chatId, "‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + e.getMessage());
        }
    }

    private String getErrorMessage(Throwable error) {
        String msg = error.getMessage();
        return msg.contains("400") ?
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG/PNG)" : msg;
    }

    private void sendTextMessage(Long chatId, String text) {
        try {
            execute(new SendMessage(chatId.toString(), text));
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    public void sendNoAccessMessage(Update update) {
        sendTextMessage(update.getMessage().getChatId(), "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}